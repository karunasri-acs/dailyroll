import { OnInit, NgZone, AfterViewInit, AfterContentChecked, AfterViewChecked, ElementRef, EventEmitter } from '@angular/core';
import 'fullcalendar';
import './lib/customEvent';
import * as ɵngcc0 from '@angular/core';
export declare class CalendarComponent implements OnInit, AfterViewInit, AfterContentChecked, AfterViewChecked {
    private element;
    private zone;
    private _eventsModel;
    private _reRender;
    eventsModel: any[];
    eventsModelChange: EventEmitter<any>;
    options: any;
    eventDrop: EventEmitter<any>;
    eventResize: EventEmitter<any>;
    eventResizeStart: EventEmitter<any>;
    eventResizeStop: EventEmitter<any>;
    eventClick: EventEmitter<any>;
    clickButton: EventEmitter<any>;
    windowResize: EventEmitter<any>;
    viewRender: EventEmitter<any>;
    eventAfterRender: EventEmitter<any>;
    eventAfterAllRender: EventEmitter<any>;
    viewDestroy: EventEmitter<any>;
    eventRender: EventEmitter<any>;
    eventDestroy: EventEmitter<any>;
    eventMouseOver: EventEmitter<any>;
    eventMouseOut: EventEmitter<any>;
    initialized: EventEmitter<any>;
    select: EventEmitter<any>;
    unselect: EventEmitter<any>;
    dayClick: EventEmitter<any>;
    navLinkDayClick: EventEmitter<any>;
    navLinkWeekClick: EventEmitter<any>;
    eventDragStart: EventEmitter<any>;
    eventDragStop: EventEmitter<any>;
    drop: EventEmitter<any>;
    eventReceive: EventEmitter<any>;
    dayRender: EventEmitter<any>;
    resourceRender: EventEmitter<any>;
    constructor(element: ElementRef, zone: NgZone);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngAfterContentChecked(): void;
    ngAfterViewChecked(): void;
    updateEventsBeforeResize(): void;
    updaterOptions(): void;
    fullCalendar(...args: any[]): any;
    updateEvent(event: any): void;
    clientEvents(idOrFilter: any): any;
    renderEvents(events: any[]): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CalendarComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CalendarComponent, "ng-fullcalendar", never, {
    "eventsModel": "eventsModel";
    "options": "options";
}, {
    "eventsModelChange": "eventsModelChange";
    "eventDrop": "eventDrop";
    "eventResize": "eventResize";
    "eventResizeStart": "eventResizeStart";
    "eventResizeStop": "eventResizeStop";
    "eventClick": "eventClick";
    "clickButton": "clickButton";
    "windowResize": "windowResize";
    "viewRender": "viewRender";
    "eventAfterRender": "eventAfterRender";
    "eventAfterAllRender": "eventAfterAllRender";
    "viewDestroy": "viewDestroy";
    "eventRender": "eventRender";
    "eventDestroy": "eventDestroy";
    "eventMouseOver": "eventMouseOver";
    "eventMouseOut": "eventMouseOut";
    "initialized": "initialized";
    "select": "select";
    "unselect": "unselect";
    "dayClick": "dayClick";
    "navLinkDayClick": "navLinkDayClick";
    "navLinkWeekClick": "navLinkWeekClick";
    "eventDragStart": "eventDragStart";
    "eventDragStop": "eventDragStop";
    "drop": "drop";
    "eventReceive": "eventReceive";
    "dayRender": "dayRender";
    "resourceRender": "resourceRender";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImNhbGVuZGFyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBR0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBOENBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25Jbml0LCBOZ1pvbmUsIEFmdGVyVmlld0luaXQsIEFmdGVyQ29udGVudENoZWNrZWQsIEFmdGVyVmlld0NoZWNrZWQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICdmdWxsY2FsZW5kYXInO1xuaW1wb3J0ICcuL2xpYi9jdXN0b21FdmVudCc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDYWxlbmRhckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgQWZ0ZXJDb250ZW50Q2hlY2tlZCwgQWZ0ZXJWaWV3Q2hlY2tlZCB7XG4gICAgcHJpdmF0ZSBlbGVtZW50O1xuICAgIHByaXZhdGUgem9uZTtcbiAgICBwcml2YXRlIF9ldmVudHNNb2RlbDtcbiAgICBwcml2YXRlIF9yZVJlbmRlcjtcbiAgICBldmVudHNNb2RlbDogYW55W107XG4gICAgZXZlbnRzTW9kZWxDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9wdGlvbnM6IGFueTtcbiAgICBldmVudERyb3A6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGV2ZW50UmVzaXplOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBldmVudFJlc2l6ZVN0YXJ0OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBldmVudFJlc2l6ZVN0b3A6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGV2ZW50Q2xpY2s6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGNsaWNrQnV0dG9uOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICB3aW5kb3dSZXNpemU6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHZpZXdSZW5kZXI6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGV2ZW50QWZ0ZXJSZW5kZXI6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGV2ZW50QWZ0ZXJBbGxSZW5kZXI6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHZpZXdEZXN0cm95OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBldmVudFJlbmRlcjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgZXZlbnREZXN0cm95OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBldmVudE1vdXNlT3ZlcjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgZXZlbnRNb3VzZU91dDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgaW5pdGlhbGl6ZWQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHNlbGVjdDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgdW5zZWxlY3Q6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGRheUNsaWNrOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBuYXZMaW5rRGF5Q2xpY2s6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG5hdkxpbmtXZWVrQ2xpY2s6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGV2ZW50RHJhZ1N0YXJ0OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBldmVudERyYWdTdG9wOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBkcm9wOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBldmVudFJlY2VpdmU6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGRheVJlbmRlcjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgcmVzb3VyY2VSZW5kZXI6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEVsZW1lbnRSZWYsIHpvbmU6IE5nWm9uZSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyQ29udGVudENoZWNrZWQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0NoZWNrZWQoKTogdm9pZDtcbiAgICB1cGRhdGVFdmVudHNCZWZvcmVSZXNpemUoKTogdm9pZDtcbiAgICB1cGRhdGVyT3B0aW9ucygpOiB2b2lkO1xuICAgIGZ1bGxDYWxlbmRhciguLi5hcmdzOiBhbnlbXSk6IGFueTtcbiAgICB1cGRhdGVFdmVudChldmVudDogYW55KTogdm9pZDtcbiAgICBjbGllbnRFdmVudHMoaWRPckZpbHRlcjogYW55KTogYW55O1xuICAgIHJlbmRlckV2ZW50cyhldmVudHM6IGFueVtdKTogdm9pZDtcbn1cbiJdfQ==